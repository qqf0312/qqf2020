{
  "title": "getTransactionReceipt",
  "schema": {
    "$ref": "../schemas/getTransactionReceipt.json"
  },
  "tests": [
    {
      "title": "getTransactionReceipt with transaction hash and success (HelloWorld.sol)",
      "request": {
        "method": "getTransactionReceipt",
        "params": [
          "0xd7363c838d68065c7a8b02b2f5e27efe15c512f421a4a6ede23ef0a389ca7ef6"
        ]
      },
      "expectedResponse": {
        "result": {
          "blockHash": "0x35cd08bbcca3fa970d315c8cd13114675e7604e384abeaeba6e1f7eb4d2e2140",
          "blockNumber": "0x2",
          "contractAddress": "0xfdde938c6f71b066eb34c1c92e5814186dbdcb5e",
          "cumulativeQuotaUsed": "0xc8c7",
          "errorMessage": null,
          "quotaUsed": "0xc8c7",
          "logs": [
          ],
          "logsBloom": "0x
          "root": null,
          "transactionHash": "0xd7363c838d68065c7a8b02b2f5e27efe15c512f421a4a6ede23ef0a389ca7ef6",
          "transactionIndex": "0x0"
        }
      },
      "asserts": [
        {
          "description": "getTransactionReceipt result.transactionHash should be equal",
          "program": ".receivedResponse.result.transactionHash == .expectedResponse.result.transactionHash"
        },
        {
          "description": "getTransactionReceipt result.contractAddress should be equal",
          "program": ".receivedResponse.result.contractAddress == .expectedResponse.result.contractAddress"
        },
        {
          "description": "getTransactionReceipt result.logsBloom should be equal",
          "program": ".receivedResponse.result.logsBloom == .expectedResponse.result.logsBloom"
        },
        {
          "description": "getTransactionReceipt result.errorMessage should be equal (both `null`)",
          "program": ".receivedResponse.result.errorMessage == .expectedResponse.result.errorMessage"
        }
      ]
    },
    {
      "title": "getTransactionReceipt with transaction hash and success (SimpleStorage.sol)",
      "request": {
        "method": "getTransactionReceipt",
        "params": [
          "0xc5ad0b717f36ca25f8ba51356379a60e1bb0b3a087dc1bcbf4f33f8435ee5647"
        ]
      },
      "expectedResponse": {
        "result": {
          "blockHash": "0xbdb92db248f0a644300c76726be3966eea636e03c19236a57a92fb5b2c91a7a1",
          "blockNumber": "0xc",
          "contractAddress": "0xa31af83ee35e753a2bb19c2a82468080c2e92eee",
          "cumulativeQuotaUsed": "0x18827",
          "errorMessage": null,
          "quotaUsed": "0x18827",
          "logs": [
            {
              "address": "0xa31af83ee35e753a2bb19c2a82468080c2e92eee",
              "blockHash": "0xbdb92db248f0a644300c76726be3966eea636e03c19236a57a92fb5b2c91a7a1",
              "blockNumber": "0xc",
              "data": "0x00000000000000000000000031d40cd88d6a884d2c95cf261c9f8ca495240af20000000000000000000000000000000000000000000000000000000000000064",
              "logIndex": "0x0",
              "topics": [
                "0x8fb1356be6b2a4e49ee94447eb9dcb8783f51c41dcddfe7919f945017d163bf3"
              ],
              "transactionHash": "0xc5ad0b717f36ca25f8ba51356379a60e1bb0b3a087dc1bcbf4f33f8435ee5647",
              "transactionIndex": "0x0",
              "transactionLogIndex": "0x0"
            }
          ],
          "logsBloom": "0x
          "root": null,
          "transactionHash": "0xc5ad0b717f36ca25f8ba51356379a60e1bb0b3a087dc1bcbf4f33f8435ee5647",
          "transactionIndex": "0x0"
        }
      },
      "asserts": [
        {
          "description": "getTransactionReceipt result.transactionHash should be equal",
          "program": ".receivedResponse.result.transactionHash == .expectedResponse.result.transactionHash"
        },
        {
          "description": "getTransactionReceipt result.contractAddress should be equal",
          "program": ".receivedResponse.result.contractAddress == .expectedResponse.result.contractAddress"
        },
        {
          "description": "getTransactionReceipt result.logsBloom should be equal",
          "program": ".receivedResponse.result.logsBloom == .expectedResponse.result.logsBloom"
        },
        {
          "description": "getTransactionReceipt result.errorMessage should be equal (both `null`)",
          "program": ".receivedResponse.result.errorMessage == .expectedResponse.result.errorMessage"
        },
        {
          "description": "getTransactionReceipt result.logs[0].topics[0] should be equal",
          "program": ".receivedResponse.result.logs[0].topics[0] == .expectedResponse.result.logs[0].topics[0]"
        },
        {
          "description": "getTransactionReceipt result.logs[0].data should be equal",
          "program": ".receivedResponse.result.logs[0].data == .expectedResponse.result.logs[0].data"
        }
      ]
    },
    {
      "title": "getTransactionReceipt with transaction hash and return errorMessage(Not enough base quota.)",
      "request": {
        "method": "getTransactionReceipt",
        "params": [
          "0x8840f58cc0b47219144aa06aee10d9be688dc9538da7e683d8efec8063426b48"
        ]
      },
      "expectedResponse": {
        "result": {
          "blockHash": "0x16c546532796ed01b49220e2e2f37ce2bba2faca24e3a7f510c69f5beb3459fa",
          "blockNumber": "0x7",
          "contractAddress": null,
          "cumulativeQuotaUsed": "0x0",
          "errorMessage": "Not enough base quota.",
          "quotaUsed": "0x0",
          "logs": [
          ],
          "logsBloom": "0x
          "root": null,
          "transactionHash": "0x8840f58cc0b47219144aa06aee10d9be688dc9538da7e683d8efec8063426b48",
          "transactionIndex": "0x0"
        }
      },
      "asserts": [
        {
          "description": "getTransactionReceipt result.transactionHash should be equal",
          "program": ".receivedResponse.result.transactionHash == .expectedResponse.result.transactionHash"
        },
        {
          "description": "getTransactionReceipt result.contractAddress should be equal",
          "program": ".receivedResponse.result.contractAddress == .expectedResponse.result.contractAddress"
        },
        {
          "description": "getTransactionReceipt result.logsBloom should be equal",
          "program": ".receivedResponse.result.logsBloom == .expectedResponse.result.logsBloom"
        },
        {
          "description": "getTransactionReceipt result.errorMessage should be equal",
          "program": ".receivedResponse.result.errorMessage == .expectedResponse.result.errorMessage"
        },
        {
          "description": "getTransactionReceipt result.logs should be equal",
          "program": ".receivedResponse.result.logs == .expectedResponse.result.logs"
        },
        {
          "description": "getTransactionReceipt result.quotaUsed should be equal",
          "program": ".receivedResponse.result.quotaUsed == .expectedResponse.result.quotaUsed"
        }
      ]
    },
    {
      "title": "getTransactionReceipt with transaction hash and return errorMessage(Out of quota.)",
      "request": {
        "method": "getTransactionReceipt",
        "params": [
          "0x2d3f3a3bab98e76139374501792e0bbee6e0b1b877bd8d3856153ec7fb0065ea"
        ]
      },
      "expectedResponse": {
        "result": {
          "blockHash": "0xaa5d2b3ef948dfb989f2210840c061a5a47112b660fd9cf2a671ffadd51242d1",
          "blockNumber": "0x8",
          "contractAddress": null,
          "cumulativeQuotaUsed": "0x40000001",
          "errorMessage": "Out of quota.",
          "quotaUsed": "0x40000001",
          "logs": [
          ],
          "logsBloom": "0x
          "root": null,
          "transactionHash": "0x2d3f3a3bab98e76139374501792e0bbee6e0b1b877bd8d3856153ec7fb0065ea",
          "transactionIndex": "0x0"
        }
      },
      "asserts": [
        {
          "description": "getTransactionReceipt result.transactionHash should be equal",
          "program": ".receivedResponse.result.transactionHash == .expectedResponse.result.transactionHash"
        },
        {
          "description": "getTransactionReceipt result.contractAddress should be equal",
          "program": ".receivedResponse.result.contractAddress == .expectedResponse.result.contractAddress"
        },
        {
          "description": "getTransactionReceipt result.logsBloom should be equal",
          "program": ".receivedResponse.result.logsBloom == .expectedResponse.result.logsBloom"
        },
        {
          "description": "getTransactionReceipt result.errorMessage should be equal",
          "program": ".receivedResponse.result.errorMessage == .expectedResponse.result.errorMessage"
        },
        {
          "description": "getTransactionReceipt result.logs should be equal",
          "program": ".receivedResponse.result.logs == .expectedResponse.result.logs"
        },
        {
          "description": "getTransactionReceipt result.quotaUsed should be equal",
          "program": ".receivedResponse.result.quotaUsed == .expectedResponse.result.quotaUsed"
        }
      ]
    },
    {
      "title": "getTransactionReceipt with transaction hash and return EVM Error.",
      "request": {
        "method": "getTransactionReceipt",
        "params": [
          "0xcb55625ee53ac7479910a5b97b8cef92b109d9b5af4df422d2f922bcea1118be"
        ]
      },
      "expectedResponse": {
        "result": {
          "blockHash": "0x91f4e498a95794fd9660e3687bf86f19668a5ea67fa44fdc76cf145f030aee2a",
          "blockNumber": "0xa",
          "contractAddress": null,
          "cumulativeQuotaUsed": "0x2710",
          "errorMessage": "Not enough stack elements to execute instruction.",
          "quotaUsed": "0x2710",
          "logs": [
          ],
          "logsBloom": "0x
          "root": null,
          "transactionHash": "0xcb55625ee53ac7479910a5b97b8cef92b109d9b5af4df422d2f922bcea1118be",
          "transactionIndex": "0x0"
        }
      },
      "asserts": [
        {
          "description": "getTransactionReceipt result.transactionHash should be equal",
          "program": ".receivedResponse.result.transactionHash == .expectedResponse.result.transactionHash"
        },
        {
          "description": "getTransactionReceipt result.contractAddress should be equal",
          "program": ".receivedResponse.result.contractAddress == .expectedResponse.result.contractAddress"
        },
        {
          "description": "getTransactionReceipt result.logsBloom should be equal",
          "program": ".receivedResponse.result.logsBloom == .expectedResponse.result.logsBloom"
        },
        {
          "description": "getTransactionReceipt result.errorMessage should be equal",
          "program": ".receivedResponse.result.errorMessage == .expectedResponse.result.errorMessage"
        },
        {
          "description": "getTransactionReceipt result.logs should be equal",
          "program": ".receivedResponse.result.logs == .expectedResponse.result.logs"
        }
      ]
    },
    {
      "title": "getTransactionReceipt with wrong transaction hash and get empty result",
      "request": {
        "method": "getTransactionReceipt",
        "params": [
          "0x25a1d215c49f14a14d33b9836a5e29dd5269c2e9337ab6eaa78766ea9a000000"
        ]
      },
      "expectedResponse": {
        "result": null
      },
      "asserts": [
        {
          "description": "getTransactionReceipt result should be equal",
          "program": ".receivedResponse.result == .expectedResponse.result"
        }
      ]
    },
    {
      "title": "getTransactionReceipt with no parameters",
      "request": {
        "method": "getTransactionReceipt",
        "params": [],
        "shouldFailSchema": true
      },
      "expectedResponse": {
        "error": {
          "message": "missing value for required argument 0",
          "code": -32602
        }
      },
      "asserts": [
        {
          "description": "response should be an error",
          "program": ".receivedResponse.error != null"
        },
        {
          "description": "error code should be -32602",
          "program": ".receivedResponse.error.code == .expectedResponse.error.code"
        }
      ]
    }
  ]
}
